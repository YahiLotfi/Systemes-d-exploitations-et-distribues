package RMIFournisseur;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.SocketAddress;
import java.net.SocketException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.Scanner;
import java.util.Vector;

import RMIFournisseur.IBiere;

public class Commandeproc {

	

	public static void main(String[] args) throws NotBoundException, IOException{
		// TODO Auto-generated method stub
		
		final int port = 8888;
		  
		final int BUFFER_SIZE = 1024;
	        try {
	            DatagramSocket serverSocket = new DatagramSocket(port);
	            byte[] buffer = new byte[1000];
	            byte[] receiveBuffer = new byte[BUFFER_SIZE];
	            byte[] sendBuffer = new byte[1024];
	            DatagramPacket packet = new DatagramPacket(buffer, buffer.length);

	            System.out.println("Server listening on port " + port);

	            while (true) {
	            	  DatagramPacket receivePacket = new DatagramPacket(receiveBuffer, receiveBuffer.length);
	                  System.out.println("Waiting for message...");
	                  serverSocket.receive(receivePacket);

	                  String message = new String(receivePacket.getData(), 0, receivePacket.getLength());
	                  System.out.println("Message received: " + message);

	             /*   socket.receive(packet);
	                System.out.println("Message received");
	                String message = new String(packet.getData(), 0, packet.getLength());
	                System.out.println("Message received: " + message);*/
	        		IBiere stub =  (IBiere) Naming.lookup("rmi://localhost:1125/RMI");
	    			
	        		Vector<Biere> blondes =new Vector<Biere>();
	        		Vector<Biere> Ambrees =new Vector<Biere>();
	        		Vector<Biere> toutes = new Vector<Biere>();
	        		int i=1;
	        		Scanner scanner = new Scanner(System.in);
	        		

	        		/*lancer le processus suiuvant une fois une requete est recue */
	        		
	       
	        System.out.println("1- afficher le Catalogue des bieres disponibles");
	        System.out.println("2 - Commander des futs de bieres");
	        do {
	         i= scanner.nextInt();
	         scanner.nextLine(); 
	        	blondes =stub.listeBlondes();
	        	Ambrees =stub.listeAmbrees();
	        	toutes.addAll(Ambrees);
	        	toutes.addAll(blondes);

	        if(i==1) {
	        	


	        	for (int j=0; i<toutes.size(); i++) {
	        		System.out.println("nom :"+toutes.elementAt(i).getNom()+" - couleur :"+toutes.elementAt(i).getCouleur()+" - degré :"+toutes.elementAt(i).getDegre());
	        	
	        	
	        	}
	        	}
	        	if(i==2) {
	        		System.out.println("entrer le nom de la biere : ");
	        		 
	        		String nom = scanner.nextLine();
	        		
	        		
	        		 Biere b;
	        		 b=stub.acheterBiere(nom);
	        		 System.out.println(b.getNom());
	        		 
	        		if(b.getNom().equals(nom)) {
	        			 System.out.println("vous avez acheté un fut de biere de type : " + b.getNom());
	        			 
	        			/*avertir le processus controle pour faire la mise a jours*/
	        		
	        			InetAddress clientAddress = receivePacket.getAddress();
	        		      int clientPort = receivePacket.getPort();
	        		     //envoyer les info de la biere achetée
	        		      String response =  b.getNom() + " "+b.getCouleur()+" "+b.getDegre();
	        		      sendBuffer = response.getBytes();
	        		      DatagramPacket sendPacket = new DatagramPacket(sendBuffer, sendBuffer.length, clientAddress, clientPort);
	        		      serverSocket.send(sendPacket);
	        		      System.out.println("Response sent: " + new String(sendBuffer));
	        			
	        		}
	        	}
	        
	        }while (i != 1 && i != 2);
	            }
	        } catch (Exception e) {
	            e.printStackTrace();
	        }
	        
	        
	



	}

}
